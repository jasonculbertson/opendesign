---
import AuthLayout from '../layouts/AuthLayout.astro'
import { supabase } from '../lib/supabase'
---

<AuthLayout title="Welcome - Open Design Docs">
  <div id="imageEditorModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-lg max-w-lg w-full">
      <div class="p-4 border-b border-gray-200 flex justify-between items-center">
        <h3 class="text-lg font-medium text-gray-900">Edit photo</h3>
        <button id="closeEditor" class="text-gray-500 hover:text-gray-700">
          <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="p-4">
        <div class="relative aspect-square w-full bg-gray-100 mb-4" style="max-height: 400px;">
          <img id="cropperImage" class="max-w-full hidden" style="max-height: 400px;" />
        </div>
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-4 h-4 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <input 
            type="range" 
            id="zoomSlider" 
            min="0.5" 
            max="1.5" 
            step="0.1" 
            value="1"
            class="w-full h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer"
          >
          <svg class="w-5 h-5 text-gray-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z M12 10v4M10 12h4" />
          </svg>
        </div>
        <div class="flex justify-end gap-3">
          <button
            id="cancelEdit"
            class="px-4 py-2 text-[15px] text-gray-700 hover:bg-gray-50 rounded-lg"
          >
            Cancel
          </button>
          <button
            id="saveEdit"
            class="px-4 py-2 text-[15px] text-white bg-gray-900 hover:bg-gray-800 rounded-lg"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="flex flex-col items-center justify-center min-h-[calc(100vh-88px)]">
    <div class="w-full max-w-[480px] px-4 mb-8 text-center">
      <h1 class="text-[28px] font-semibold text-gray-900 mb-2 whitespace-nowrap">
        Welcome to Open Design Docs
      </h1>
      <p class="text-[15px] text-gray-600">
        First things first, tell us a bit about yourself
      </p>
    </div>

    <div class="w-full max-w-[420px] px-4">
      <div class="space-y-6">
        <form id="profileForm" class="space-y-6">
          <div class="flex flex-col items-center space-y-4 mb-8">
            <div class="relative group">
              <button
                type="button"
                id="uploadButton"
                class="w-24 h-24 rounded-full bg-gray-50 flex items-center justify-center overflow-hidden border border-gray-200 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 focus:ring-offset-2"
              >
                <img
                  id="profilePreview"
                  class="w-full h-full object-cover hidden"
                  alt="Profile preview"
                />
                <svg id="defaultAvatar" class="w-14 h-14 text-gray-300" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/>
                </svg>
              </button>
              <input
                type="file"
                id="profileImage"
                accept="image/*"
                class="hidden"
              />
            </div>
            <span class="text-[15px] text-gray-500">Add a photo</span>
          </div>

          <div class="space-y-4">
            <div class="space-y-1">
              <input
                type="text"
                id="fullName"
                name="fullName"
                required
                class="block w-full px-4 py-2.5 border border-gray-200 rounded-lg text-[15px] placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Full name"
              />
            </div>

            <div class="space-y-1">
              <input
                type="text"
                id="role"
                name="role"
                class="block w-full px-4 py-2.5 border border-gray-200 rounded-lg text-[15px] placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Role (e.g. Product Designer)"
              />
            </div>

            <div class="space-y-1">
              <textarea
                id="bio"
                name="bio"
                rows="3"
                class="block w-full px-4 py-2.5 border border-gray-200 rounded-lg text-[15px] placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                placeholder="Bio (Tell us about yourself)"
              ></textarea>
            </div>

            <div class="space-y-2">
              <label class="inline-flex items-center">
                <input
                  type="checkbox"
                  id="newsletter"
                  name="newsletter"
                  class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  checked
                />
                <span class="ml-2 text-[13px] text-gray-600">
                  Send me product updates.
                  <span class="text-gray-500">Unsubscribe anytime.</span>
                </span>
              </label>
            </div>

            <div class="relative">
              <div class="absolute inset-0 flex items-center">
                <div class="w-full border-t border-gray-200"></div>
              </div>
              <div class="relative flex justify-center text-sm">
                <span class="px-2 text-gray-500 bg-white text-[13px]">or</span>
              </div>
            </div>

            <button
              type="button"
              id="linkedinButton"
              class="w-full flex items-center justify-center gap-2 px-4 py-2.5 border border-gray-200 rounded-lg text-[15px] font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              <svg class="w-5 h-5 text-[#0A66C2]" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.68 1.68 0 0 0-1.68 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z"/>
              </svg>
              Import from LinkedIn
            </button>

            <button
              type="submit"
              id="continueButton"
              disabled
              class="w-full flex justify-center py-2.5 px-4 rounded-lg text-[15px] font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-900"
            >
              Continue
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AuthLayout>

<script>
  import { initImageEditor } from '../components/ImageEditor'
  import { supabase } from '../lib/supabase'

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize image editor
    initImageEditor()

    // LinkedIn button handler
    const linkedinButton = document.getElementById('linkedinButton')
    if (linkedinButton) {
      linkedinButton.addEventListener('click', async () => {
        try {
          const { error } = await supabase.auth.signInWithOAuth({
            provider: 'linkedin',
            options: {
              redirectTo: `${window.location.origin}/welcome`,
              scopes: 'r_liteprofile r_emailaddress',
            }
          })

          if (error) throw error
        } catch (error) {
          console.error('LinkedIn sign in error:', error)
        }
      })
    }

    // Handle form submission
    const form = document.getElementById('profileForm')
    const fullNameInput = document.getElementById('fullName')
    const continueButton = document.getElementById('continueButton')
    const profilePreview = document.getElementById('profilePreview')

    // Handle button state based on full name input
    if (fullNameInput && continueButton) {
      fullNameInput.addEventListener('input', () => {
        continueButton.disabled = !fullNameInput.value.trim()
      })
    }

    form?.addEventListener('submit', async (e) => {
      e.preventDefault()

      const fullName = document.getElementById('fullName')?.value
      const role = document.getElementById('role')?.value
      const bio = document.getElementById('bio')?.value
      const newsletter = document.getElementById('newsletter')?.checked

      try {
        let avatarUrl = null

        // Get the final cropped image from the preview
        const finalImage = profilePreview?.src
        if (finalImage && !finalImage.includes('data:image/svg+xml')) {
          // Convert base64 to blob
          const response = await fetch(finalImage)
          const blob = await response.blob()
          
          const fileName = `${Math.random()}.jpg`
          const filePath = `${fileName}`

          const { error: uploadError, data } = await supabase.storage
            .from('avatars')
            .upload(filePath, blob)

          if (uploadError) throw uploadError

          if (data) {
            const { data: { publicUrl } } = supabase.storage
              .from('avatars')
              .getPublicUrl(data.path)
            
            avatarUrl = publicUrl
          }
        }

        // For development, just log the form data
        console.log({
          fullName,
          role,
          bio,
          newsletter,
          avatarUrl
        })
        
        alert('Profile updated successfully!')
        window.location.href = '/'

      } catch (error) {
        console.error('Error:', error)
        alert('An error occurred while saving your profile. Please try again.')
      }
    })
  })
</script>
