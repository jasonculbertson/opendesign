---
import Sidebar from '../components/Sidebar.astro';
import '../styles/main.css';

interface Props {
  title: string;
  description?: string;
}

const { title, description = "Open Design Documentation" } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="min-h-screen bg-gradient-to-br from-[#F5F1F9] via-[#F3E7F0] via-[#F4E5E9] via-[#F9EBE5] to-[#FBE9E7]">
    <header class="fixed top-0 left-0 right-0 h-14 z-50 flex items-center justify-between px-4 lg:hidden bg-white/75 backdrop-blur-sm border-b border-gray-200/50">
      <div class="flex items-center gap-2">
        <div class="flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-gray-700" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="3" y1="9" x2="21" y2="9"></line>
            <line x1="9" y1="21" x2="9" y2="9"></line>
          </svg>
          <span class="text-[15px] font-medium text-gray-900 leading-none">Open Design Docs</span>
        </div>
      </div>
      <button
        id="mobile-menu-button"
        class="lg:hidden w-10 h-10 flex items-center justify-center text-gray-500 hover:text-gray-600 -mr-2 touch-manipulation"
        aria-label="Toggle menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none">
          <path class="hamburger-top" d="M4 6h16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          <path class="hamburger-middle" d="M4 12h16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          <path class="hamburger-bottom" d="M4 18h16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
    </header>

    <style>
      .hamburger-top,
      .hamburger-middle,
      .hamburger-bottom {
        transform-origin: center;
        transition: all 0.3s ease;
      }

      #mobile-menu-button[aria-expanded="true"] .hamburger-top {
        transform: rotate(45deg) translate(0, 6px);
      }

      #mobile-menu-button[aria-expanded="true"] .hamburger-middle {
        opacity: 0;
      }

      #mobile-menu-button[aria-expanded="true"] .hamburger-bottom {
        transform: rotate(-45deg) translate(0, -6px);
      }

      @media (max-width: 1024px) {
        #sidebar {
          transition: transform 0.3s ease-in-out;
          will-change: transform;
        }

        #mobile-overlay {
          transition: opacity 0.3s ease-in-out;
        }
      }
    </style>

    <div id="mobile-overlay" class="fixed inset-0 bg-black/20 backdrop-blur-sm z-40 hidden lg:hidden opacity-0 transition-opacity"></div>
    
    <div class="flex min-h-screen">
      <Sidebar currentPath={Astro.url.pathname} />
      
      <main class="flex-1 lg:pl-[250px] w-full">
        <div class="gradient-panel h-full min-h-screen">
          <div class="h-full pt-16 px-3 pb-4 sm:px-4 lg:pt-20 lg:p-8">
            <div class="max-w-[900px] mx-auto">
              <slot />
            </div>
          </div>
        </div>
      </main>
    </div>

    <script>
      const sidebar = document.getElementById('sidebar');
      const overlay = document.getElementById('mobile-overlay');
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      let isOpen = false;

      function toggleMenu() {
        if (!sidebar || !overlay || !mobileMenuButton) return;
        
        isOpen = !isOpen;
        mobileMenuButton.setAttribute('aria-expanded', isOpen.toString());
        
        if (isOpen) {
          sidebar.style.transform = 'translateX(0)';
          overlay.classList.remove('hidden');
          document.body.style.overflow = 'hidden';
          // Delay the opacity transition
          requestAnimationFrame(() => {
            overlay.style.opacity = '1';
          });
        } else {
          sidebar.style.transform = 'translateX(100%)';
          overlay.style.opacity = '0';
          document.body.style.overflow = '';
          // Wait for the transition before hiding
          setTimeout(() => {
            overlay.classList.add('hidden');
          }, 300);
        }
      }

      // Set initial position based on screen size
      function updateSidebarPosition() {
        if (!sidebar) return;
        if (window.innerWidth >= 1024) {
          sidebar.style.transform = 'translateX(0)';
          if (overlay) overlay.classList.add('hidden');
          document.body.style.overflow = '';
          isOpen = false;
          if (mobileMenuButton) {
            mobileMenuButton.setAttribute('aria-expanded', 'false');
          }
        } else if (!isOpen) {
          sidebar.style.transform = 'translateX(100%)';
        }
      }

      // Add touch event handling
      let touchStartX = 0;
      let touchEndX = 0;

      document.addEventListener('touchstart', e => {
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true });

      document.addEventListener('touchend', e => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      }, { passive: true });

      function handleSwipe() {
        const swipeThreshold = 50;
        const diff = touchEndX - touchStartX;

        if (Math.abs(diff) < swipeThreshold) return;

        if (diff > 0 && !isOpen) { // Right swipe when closed
          toggleMenu();
        } else if (diff < 0 && isOpen) { // Left swipe when open
          toggleMenu();
        }
      }

      mobileMenuButton?.addEventListener('click', toggleMenu);
      overlay?.addEventListener('click', toggleMenu);
      window.addEventListener('resize', updateSidebarPosition);
      updateSidebarPosition();
    </script>
  </body>
</html>